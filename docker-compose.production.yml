version: '3.7'

services:
  nginx:
    build:
      context: ./nginx
    restart: always
    depends_on:
      - backend
    volumes:
      - local_static:/var/www/local_static/
      - nuxt:/var/www/nuxt:ro
      - acme.sh:/acme.sh:delegated
      - certs:/etc/nginx/certs
    environment:
      - ENVIRONMENT=production
      - SITE_HOST
      - IMGPROXY_SITE_HOST
      - MONITORING_HTPASSWD
      - HTPASSWD
      - HTPASSWD_MODE
    ports:
      - 80:80
      - 443:443
      - 9100:9100
      - 9187:9187
      - 8081:8080
    logging:
      driver: journald
      options:
        tag: nginx

  backend:
    restart: always
    build:
      context: ./backend
      args:
        POETRY_PARAMS: "--no-dev"
    entrypoint: ./entrypoint.production.sh
    command: >
              poetry run gunicorn config.wsgi:application -w ${GUNICORN_WORKERS:-5} --keep-alive 120 -b 0.0.0.0:8000
              --max-requests 10000 --max-requests-jitter 1000 --access-logfile - --error-logfile -
              --access-logformat '{"date":"%(t)s","method":"%(m)s","path":"%(U)s","query":"%(q)s","protocol":"%(H)s","status":%(s)s,"response_size":%(B)s,"referer":"%(f)s","user_agent":"%(a)s","time":%(D)s,"ip":"%({x-real-ip}i)s"}'
    depends_on:
      - db
    volumes:
      - static:/app/static/:delegated
    logging:
      driver: journald
      options:
        tag: backend

  #  celery:
  #    restart: always
  #    environment:
  #      - DEBUG=False
  #    logging:
  #      driver: journald
  #      options:
  #        tag: celery

  #  celery-beat:
  #    restart: always
  #    environment:
  #      - DEBUG=False
  #    logging:
  #      driver: journald
  #      options:
  #        tag: celery-beat

  db:
    restart: always
    ports:
      - 127.0.0.1:5432:5432
    command:
      - "postgres"
      - "-c"
      - "max_connections=150"
      - "-c"
      - "shared_buffers=1GB" # 25% от текущей оперативной памяти
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=32MB" # shared_buffers поделить на max_connections. Если получается меньше 32МБ, то оставить 32МБ
      - "-c"
      - "maintenance_work_mem=512MB" # 10% от оперативной памяти
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    logging:
      driver: journald
      options:
        tag: db

  redis:
    restart: always
    logging:
      driver: journald
      options:
        tag: redis



  imgproxy:
    build:
      context: ./imgproxy
    ports:
      - 127.0.0.1:8080:8080
    environment:
     - IMGPROXY_DEVELOPMENT_ERRORS_MODE
     - IMGPROXY_ALLOWED_SOURCES
     - IMGPROXY_USE_S3=true
     - IMGPROXY_LOG_LEVEL=debug
     - AWS_ACCESS_KEY_ID
     - AWS_SECRET_ACCESS_KEY
     - IMGPROXY_SENTRY_DSN
     - IMGPROXY_MAX_SRC_RESOLUTION
     - IMGPROXY_ALLOW_ORIGIN
     - IMGPROXY_IGNORE_SSL_VERIFICATION


  #  flower:
  #    image: registry.gitlab.idacloud.ru/idaproject/internal/template_project/flower:${TAG:-latest}
#
#  promtail:
#    image: registry.gitlab.idacloud.ru/idaproject/internal/template_project/promtail:${TAG:-latest}
#    build: ./promtail
#    restart: always
#    volumes:
#      - /var/log/journal/:/var/log/journal/:ro
#    command:
#      - '-config.file=/promtail.yml'
#      - '-config.expand-env=true'
#    environment:
#      - LOKI_URL
#      - LOKI_USERNAME
#      - LOKI_PASSWORD
#      - LOKI_SERVER_TAG
#
#  node-exporter:
#    image: quay.io/prometheus/node-exporter
#    container_name: node-exporter
#    restart: always
#    command:
#      - '--path.rootfs=/host'
#    pid: host
#    volumes:
#      - '/:/host:ro,rslave'
#
#  cadvisor:
#    image: gcr.io/cadvisor/cadvisor
#    container_name: cadvisor
#    restart: always
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#    command:
#      - '-housekeeping_interval=10s'
#      - '-docker_only=true'
#
#  postgres-exporter:
#    restart: always
#    image: bitnami/postgres-exporter
#    container_name: postgres-exporter
#    environment:
#      - DATA_SOURCE_URI=db:${POSTGRES_PORT}/postgres?sslmode=disable
#      - DATA_SOURCE_USER=${POSTGRES_USER}
#      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}


volumes:
  local_static:
  nuxt:
  acme.sh:
  certs:
  static:
  redisdata:
  postgresdata:
  api_cache:
  nginx_cache:
